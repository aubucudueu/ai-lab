 class Solution:
 def solve(self, board):
 # Create a dictionary to store the state of the board and the number of moves
 state_dict = {}
 # Flatten the board to a tuple for easy comparison and storage
 flatten = []
 for i in range(len(board)):
 flatten += board[i]
 flatten = tuple(flatten)
 # Initialize the dictionary with the starting state
 state_dict[flatten] = 0
 # If the board is already in the goal state, return 0
 if flatten == (0, 1, 2, 3, 4, 5, 6, 7, 8):
 return 0
# Perform BFS to find the shortest path to the goal state
 return self.get_paths(state_dict)
 def get_paths(self, state_dict):
 cnt = 0
 while True:
 # Get all nodes at the current distance
 current_nodes = [x for x in state_dict if state_dict[x] == cnt]
 # If there are no nodes at the current distance, return-1 (no solution)
 if len(current_nodes) == 0:
 return-1
 for node in current_nodes:
 # Get the next possible moves from the current node
 next_moves = self.find_next(node)
 for move in next_moves:
 # If the move is not already visited, add it to the dictionary
 if move not in state_dict:
 state_dict[move] = cnt + 1
 # If the move is the goal state, return the number of moves
 if move == (0, 1, 2, 3, 4, 5, 6, 7, 8):
 return cnt + 1
 # Increment the move count
 cnt += 1
 def find_next(self, node):
 # Define the possible moves for each position of the 0 tile
 moves = {
 0: [1, 3],
 1: [0, 2, 4],
 2: [1, 5],
 3: [0, 4, 6],
 4: [1, 3, 5, 7],
 5: [2, 4, 8],
 6: [3, 7],
 7: [4, 6, 8],
 8: [5, 7],
 }
 results = []
pos_0 = node.index(0)
 # Generate all possible moves by swapping the 0 tile with its neighbors
 for move in moves[pos_0]:
 new_node = list(node)
 new_node[move], new_node[pos_0] = new_node[pos_0], new_node[move]
 results.append(tuple(new_node))
 return results
 # Create an instance of Solution and run the solve method
 ob = Solution()
 matrix = [
 [3, 1, 2],
 [4, 7, 5],
 [6, 8, 0]
 ]
 print("NO OF MOVES==", ob.solve(matrix))
